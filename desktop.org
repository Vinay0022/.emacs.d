#+title: Emacs Desktop Environment
#+PROPERTY: header-args:emacs-lisp :tangle ./desktop.el

* EXWM Window Management

#+begin_src emacs-lisp
    (defun efs/exwm-update-class()
    (exwm-workspace-rename-buffer exwm-class-name))
    (use-package exwm

    :ensure t
    :config
    (setq exwm-workspace-number 5)
  ;; When window "class" updates, use it to set the buffer name
    (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

    ;; Rebind CapsLock to Ctrl
  ;;  (start-process-shell-command "xmodmap" nil "xmodmap ~/.emacs.d/exwm/Xmodmap")

    ;; Set the screen resolution (update this to be the correct resolution for your screen!)
    (require 'exwm-randr)
    (setq exwm-systemtray-height 26)
    (exwm-randr-mode 1)
    ;; (start-process-shell-command "xrandr" nil "xrandr --output Virtual-1 --primary --mode 2048x1152 --pos 0x0 --rotate normal")

    ;; Load the system tray before exwm-init
    (require 'exwm-systemtray)
    (exwm-systemtray-mode 1)

    ;; These keys should always pass through to Emacs
    (setq exwm-input-prefix-keys
      '(?\C-x
	?\C-u
	?\C-h
	?\M-x
	?\M-`
	?\M-&
	?\M-:
	?\C-\M-j  ;; Buffer list
	?\C-\ ))  ;; Ctrl+Space

    ;; Ctrl+Q will enable the next key to be sent directly
    (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

    ;; Set up global key bindings.  These always work, no matter the input state!
    ;; Keep in mind that changing this list after EXWM initializes has no effect.
    (setq exwm-input-global-keys
	  `(
	    ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
	    ([?\s-r] . exwm-reset)

	    ;; Move between windows
	    ([s-left] . windmove-left)
	    ([s-right] . windmove-right)
	    ([s-up] . windmove-up)
	    ([s-down] . windmove-down)

	    ;; Launch applications via shell command
	    ([?\s-&] . (lambda (command)
			 (interactive (list (read-shell-command "$ ")))
			 (start-process-shell-command command nil command)))

	    ;; Switch workspace
	    ([?\s-w] . exwm-workspace-switch)
	    ([?\s-`] . (lambda () (interactive) (exwm-workspace-switch-create 0)))

	    ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
	    ,@(mapcar (lambda (i)
			`(,(kbd (format "s-%d" i)) .
			  (lambda ()
			    (interactive)
			    (exwm-workspace-switch-create ,i))))
		      (number-sequence 0 9))))

    (exwm-enable))

#+end_src

* Desktop Environment

#+begin_src emacs-lisp

	(use-package desktop-environment
	  :ensure t
	  :after exwm
	  :config (desktop-environment-mode)
	  :custom
	  (desktop-environment-brightness-small-increment "2%+")
	  (desktop-environment-brightness-small-decrement "2%-")
	  (desktop-environment-brightness-normal-increment "5%+")
	  (desktop-environment-brightness-normal-decrement "5%-"))

      (defun efs/run-in-background (command)
	(let ((command-parts (split-string command "[ ]+")))
	  (apply #'call-process `(,(car command-parts) nil 0 nil ,@(cdr command-parts)))))


    ;; Launch apps that will run in the background
    (efs/run-in-background "pasystray")
    (efs/run-in-background "blueman-applet")
    (efs/run-in-background "nm-applet")
    (efs/run-in-background "dunst")

#+end_src

* Dunst Notification Settings

#+begin_src conf :tangle ~/.config/dunst/dunstrc :mkdirp yes

  [global]
      ### Display ###
      monitor = 0

      # The geometry of the window:
      #   [{width}]x{height}[+/-{x}+/-{y}]
      geometry = "500x10-10+50"

      # Show how many messages are currently hidden (because of geometry).
      indicate_hidden = yes

      # Shrink window if it's smaller than the width.  Will be ignored if
      # width is 0.
      shrink = no

      # The transparency of the window.  Range: [0; 100].
      transparency = 10

      # The height of the entire notification.  If the height is smaller
      # than the font height and padding combined, it will be raised
      # to the font height and padding.
      notification_height = 0

      # Draw a line of "separator_height" pixel height between two
      # notifications.
      # Set to 0 to disable.
      separator_height =1
      separator_color = frame

      # Padding between text and separator.
      padding = 8

      # Horizontal padding.
      horizontal_padding = 8

      # Defines width in pixels of frame around the notification window.
      # Set to 0 to disable.
      frame_width = 2

      # Defines color of the frame around the notification window.
      frame_color = "#89AAEB"

      # Sort messages by urgency.
      sort = yes

      # Don't remove messages, if the user is idle (no mouse or keyboard input)
      # for longer than idle_threshold seconds.
      idle_threshold = 120

      ### Text ###

      font = Cantarell 13

      # The spacing between lines.  If the height is smaller than the
      # font height, it will get raised to the font height.
      line_height = 0
      markup = full

      # The format of the message.  Possible variables are:
      #   %a  appname
      #   %s  summary
      #   %b  body
      #   %i  iconname (including its path)
      #   %I  iconname (without its path)
      #   %p  progress value if set ([  0%] to [100%]) or nothing
      #   %n  progress value if set without any extra characters
      #   %%  Literal %
      # Markup is allowed
      format = "<b>%s</b>\n%b"

      # Alignment of message text.
      # Possible values are "left", "center" and "right".
      alignment = left

      # Show age of message if message is older than show_age_threshold
      # seconds.
      # Set to -1 to disable.
      show_age_threshold = 60

      # Split notifications into multiple lines if they don't fit into
      # geometry.
      word_wrap = yes

      # When word_wrap is set to no, specify where to make an ellipsis in long lines.
      # Possible values are "start", "middle" and "end".
      ellipsize = middle

      # Ignore newlines '\n' in notifications.
      ignore_newline = no

      # Stack together notifications with the same content
      stack_duplicates = true

      # Hide the count of stacked notifications with the same content
      hide_duplicate_count = false

      # Display indicators for URLs (U) and actions (A).
      show_indicators = yes

      ### Icons ###

      # Align icons left/right/off
      icon_position = left

      # Scale larger icons down to this size, set to 0 to disable
      max_icon_size = 60

      # Paths to default icons.
      icon_path = /usr/share/icons/Adwaita/16x16/symbolic/status:/usr/share/icons/Adwaita/16x16/symbolic/emblems

      ### History ###

      # Should a notification popped up from history be sticky or timeout
      # as if it would normally do.
      sticky_history = no

      # Maximum amount of notifications kept in history
      history_length = 20

      ### Misc/Advanced ###

      # Browser for opening urls in context menu.
      browser = firefox

      # Always run rule-defined scripts, even if the notification is suppressed
      always_run_script = true

      # Define the title of the windows spawned by dunst
      title = Dunst

      # Define the class of the windows spawned by dunst
      class = Dunst

      startup_notification = false
      verbosity = mesg

      # Define the corner radius of the notification window
      # in pixel size. If the radius is 0, you have no rounded
      # corners.
      # The radius will be automatically lowered if it exceeds half of the
      # notification height to avoid clipping text and/or icons.
      corner_radius = 4

      mouse_left_click = close_current
      mouse_middle_click = do_action
      mouse_right_click = close_all

  # Experimental features that may or may not work correctly. Do not expect them
  # to have a consistent behaviour across releases.
  [experimental]
      # Calculate the dpi to use on a per-monitor basis.
      # If this setting is enabled the Xft.dpi value will be ignored and instead
      # dunst will attempt to calculate an appropriate dpi value for each monitor
      # using the resolution and physical size. This might be useful in setups
      # where there are multiple screens with very different dpi values.
      per_monitor_dpi = false

  [shortcuts]

      # Shortcuts are specified as [modifier+][modifier+]...key
      # Available modifiers are "ctrl", "mod1" (the alt-key), "mod2",
      # "mod3" and "mod4" (windows-key).
      # Xev might be helpful to find names for keys.

      # Close notification.
      #close = ctrl+space

      # Close all notifications.
      #close_all = ctrl+shift+space

      # Redisplay last message(s).
      # On the US keyboard layout "grave" is normally above TAB and left
      # of "1". Make sure this key actually exists on your keyboard layout,
      # e.g. check output of 'xmodmap -pke'
      history = ctrl+grave

      # Context menu.
      context = ctrl+shift+period

  [urgency_low]
      # IMPORTANT: colors have to be defined in quotation marks.
      # Otherwise the "#" and following would be interpreted as a comment.
      background = "#222222"
      foreground = "#888888"
      timeout = 10
      # Icon for notifications with low urgency, uncomment to enable
      #icon = /path/to/icon

  [urgency_normal]
      background = "#1c1f26"
      foreground = "#ffffff"
      timeout = 10
      # Icon for notifications with normal urgency, uncomment to enable
      #icon = /path/to/icon

  [urgency_critical]
      background = "#900000"
      foreground = "#ffffff"
      frame_color = "#ff0000"
      timeout = 0
      # Icon for notifications with critical urgency, uncomment to enable
      #icon = /path/to/icon
#+end_src

* EXWM Keybiding for Dunt
#+begin_src emacs-lisp
  (defun efs/disable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused true"))

  (defun efs/enable-desktop-notifications ()
    (interactive)
    (start-process-shell-command "dunstctl" nil "dunstctl set-paused false"))

  (defun efs/dunstctl (command)
  (start-process-shell-command "dunstctl" nil (concat "dunstctl " command)))

  (exwm-input-set-key (kbd "s-n") (lambda () (interactive) (efs/dunstctl "history-pop")))
#+end_src

